

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace StaffandTrain.DataModel
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class SATConn : DbContext
{
    public SATConn()
        : base("name=SATConn")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }

    public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }

    public virtual DbSet<aspnet_Paths> aspnet_Paths { get; set; }

    public virtual DbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers { get; set; }

    public virtual DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser { get; set; }

    public virtual DbSet<aspnet_Profile> aspnet_Profile { get; set; }

    public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }

    public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }

    public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }

    public virtual DbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events { get; set; }

    public virtual DbSet<ASPStateTempApplication> ASPStateTempApplications { get; set; }

    public virtual DbSet<ASPStateTempSession> ASPStateTempSessions { get; set; }

    public virtual DbSet<BugList> BugLists { get; set; }

    public virtual DbSet<CityCircle> CityCircles { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<Companies_ListDeleted> Companies_ListDeleted { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }

    public virtual DbSet<Prospecting_Lists> Prospecting_Lists { get; set; }

    public virtual DbSet<Subscriber> Subscribers { get; set; }

    public virtual DbSet<TitleStandard> TitleStandards { get; set; }

    public virtual DbSet<Tracking> Trackings { get; set; }

    public virtual DbSet<User_List_Access> User_List_Access { get; set; }

    public virtual DbSet<User_Security> User_Security { get; set; }

    public virtual DbSet<User_Security_States> User_Security_States { get; set; }

    public virtual DbSet<UserProspectingList> UserProspectingLists { get; set; }

    public virtual DbSet<WhiteBoardName> WhiteBoardNames { get; set; }

    public virtual DbSet<ErrorLog> ErrorLogs { get; set; }

    public virtual DbSet<ExpirationKey> ExpirationKeys { get; set; }

    public virtual DbSet<InfoRequest> InfoRequests { get; set; }

    public virtual DbSet<JobPosting> JobPostings { get; set; }

    public virtual DbSet<location> locations { get; set; }

    public virtual DbSet<Newsletter> Newsletters { get; set; }

    public virtual DbSet<OpenJob> OpenJobs { get; set; }

    public virtual DbSet<OpenJobs10> OpenJobs10 { get; set; }

    public virtual DbSet<OpenJobs11> OpenJobs11 { get; set; }

    public virtual DbSet<OpenJobs12> OpenJobs12 { get; set; }

    public virtual DbSet<OpenJobs13> OpenJobs13 { get; set; }

    public virtual DbSet<OpenJobs14> OpenJobs14 { get; set; }

    public virtual DbSet<OpenJobs15> OpenJobs15 { get; set; }

    public virtual DbSet<OpenJobs16> OpenJobs16 { get; set; }

    public virtual DbSet<OpenJobs17> OpenJobs17 { get; set; }

    public virtual DbSet<OpenJobs18> OpenJobs18 { get; set; }

    public virtual DbSet<OpenJobs2> OpenJobs2 { get; set; }

    public virtual DbSet<OpenJobs3> OpenJobs3 { get; set; }

    public virtual DbSet<OpenJobs4> OpenJobs4 { get; set; }

    public virtual DbSet<OpenJobs5> OpenJobs5 { get; set; }

    public virtual DbSet<OpenJobs6> OpenJobs6 { get; set; }

    public virtual DbSet<OpenJobs7> OpenJobs7 { get; set; }

    public virtual DbSet<OpenJobs8> OpenJobs8 { get; set; }

    public virtual DbSet<OpenJobs9> OpenJobs9 { get; set; }

    public virtual DbSet<Resume> Resumes { get; set; }

    public virtual DbSet<SiteUser> SiteUsers { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<TrainingDocument> TrainingDocuments { get; set; }

    public virtual DbSet<vw_aspnet_Applications> vw_aspnet_Applications { get; set; }

    public virtual DbSet<vw_aspnet_MembershipUsers> vw_aspnet_MembershipUsers { get; set; }

    public virtual DbSet<vw_aspnet_Profiles> vw_aspnet_Profiles { get; set; }

    public virtual DbSet<vw_aspnet_Roles> vw_aspnet_Roles { get; set; }

    public virtual DbSet<vw_aspnet_Users> vw_aspnet_Users { get; set; }

    public virtual DbSet<vw_aspnet_UsersInRoles> vw_aspnet_UsersInRoles { get; set; }

    public virtual DbSet<vw_aspnet_WebPartState_Paths> vw_aspnet_WebPartState_Paths { get; set; }

    public virtual DbSet<vw_aspnet_WebPartState_Shared> vw_aspnet_WebPartState_Shared { get; set; }

    public virtual DbSet<vw_aspnet_WebPartState_User> vw_aspnet_WebPartState_User { get; set; }

    public virtual DbSet<Worker> Workers { get; set; }

    public virtual DbSet<WorkersLog> WorkersLogs { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Config> Configs { get; set; }


    public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
    {

        var tablesToCheckParameter = tablesToCheck.HasValue ?
            new ObjectParameter("TablesToCheck", tablesToCheck) :
            new ObjectParameter("TablesToCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
    }


    public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
    }


    public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
    {

        var featureParameter = feature != null ?
            new ObjectParameter("Feature", feature) :
            new ObjectParameter("Feature", typeof(string));


        var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
            new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
            new ObjectParameter("CompatibleSchemaVersion", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
    }


    public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var newPasswordQuestionParameter = newPasswordQuestion != null ?
            new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
            new ObjectParameter("NewPasswordQuestion", typeof(string));


        var newPasswordAnswerParameter = newPasswordAnswer != null ?
            new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
            new ObjectParameter("NewPasswordAnswer", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
    }


    public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var passwordSaltParameter = passwordSalt != null ?
            new ObjectParameter("PasswordSalt", passwordSalt) :
            new ObjectParameter("PasswordSalt", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var passwordQuestionParameter = passwordQuestion != null ?
            new ObjectParameter("PasswordQuestion", passwordQuestion) :
            new ObjectParameter("PasswordQuestion", typeof(string));


        var passwordAnswerParameter = passwordAnswer != null ?
            new ObjectParameter("PasswordAnswer", passwordAnswer) :
            new ObjectParameter("PasswordAnswer", typeof(string));


        var isApprovedParameter = isApproved.HasValue ?
            new ObjectParameter("IsApproved", isApproved) :
            new ObjectParameter("IsApproved", typeof(bool));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var createDateParameter = createDate.HasValue ?
            new ObjectParameter("CreateDate", createDate) :
            new ObjectParameter("CreateDate", typeof(System.DateTime));


        var uniqueEmailParameter = uniqueEmail.HasValue ?
            new ObjectParameter("UniqueEmail", uniqueEmail) :
            new ObjectParameter("UniqueEmail", typeof(int));


        var passwordFormatParameter = passwordFormat.HasValue ?
            new ObjectParameter("PasswordFormat", passwordFormat) :
            new ObjectParameter("PasswordFormat", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
    }


    public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var emailToMatchParameter = emailToMatch != null ?
            new ObjectParameter("EmailToMatch", emailToMatch) :
            new ObjectParameter("EmailToMatch", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
    }


    public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameToMatchParameter = userNameToMatch != null ?
            new ObjectParameter("UserNameToMatch", userNameToMatch) :
            new ObjectParameter("UserNameToMatch", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
    }


    public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
    }


    public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
            new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
            new ObjectParameter("MinutesSinceLastInActive", typeof(int));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
            new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
            new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));


        var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
            new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
            new ObjectParameter("PasswordAttemptWindow", typeof(int));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var passwordAnswerParameter = passwordAnswer != null ?
            new ObjectParameter("PasswordAnswer", passwordAnswer) :
            new ObjectParameter("PasswordAnswer", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
    }


    public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
            new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
            new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
    }


    public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var updateLastActivityParameter = updateLastActivity.HasValue ?
            new ObjectParameter("UpdateLastActivity", updateLastActivity) :
            new ObjectParameter("UpdateLastActivity", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
    }


    public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var updateLastActivityParameter = updateLastActivity.HasValue ?
            new ObjectParameter("UpdateLastActivity", updateLastActivity) :
            new ObjectParameter("UpdateLastActivity", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
    }


    public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var newPasswordParameter = newPassword != null ?
            new ObjectParameter("NewPassword", newPassword) :
            new ObjectParameter("NewPassword", typeof(string));


        var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
            new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
            new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));


        var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
            new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
            new ObjectParameter("PasswordAttemptWindow", typeof(int));


        var passwordSaltParameter = passwordSalt != null ?
            new ObjectParameter("PasswordSalt", passwordSalt) :
            new ObjectParameter("PasswordSalt", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var passwordFormatParameter = passwordFormat.HasValue ?
            new ObjectParameter("PasswordFormat", passwordFormat) :
            new ObjectParameter("PasswordFormat", typeof(int));


        var passwordAnswerParameter = passwordAnswer != null ?
            new ObjectParameter("PasswordAnswer", passwordAnswer) :
            new ObjectParameter("PasswordAnswer", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
    }


    public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var newPasswordParameter = newPassword != null ?
            new ObjectParameter("NewPassword", newPassword) :
            new ObjectParameter("NewPassword", typeof(string));


        var passwordSaltParameter = passwordSalt != null ?
            new ObjectParameter("PasswordSalt", passwordSalt) :
            new ObjectParameter("PasswordSalt", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var passwordFormatParameter = passwordFormat.HasValue ?
            new ObjectParameter("PasswordFormat", passwordFormat) :
            new ObjectParameter("PasswordFormat", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
    }


    public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
    }


    public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));


        var isApprovedParameter = isApproved.HasValue ?
            new ObjectParameter("IsApproved", isApproved) :
            new ObjectParameter("IsApproved", typeof(bool));


        var lastLoginDateParameter = lastLoginDate.HasValue ?
            new ObjectParameter("LastLoginDate", lastLoginDate) :
            new ObjectParameter("LastLoginDate", typeof(System.DateTime));


        var lastActivityDateParameter = lastActivityDate.HasValue ?
            new ObjectParameter("LastActivityDate", lastActivityDate) :
            new ObjectParameter("LastActivityDate", typeof(System.DateTime));


        var uniqueEmailParameter = uniqueEmail.HasValue ?
            new ObjectParameter("UniqueEmail", uniqueEmail) :
            new ObjectParameter("UniqueEmail", typeof(int));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
            new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
            new ObjectParameter("IsPasswordCorrect", typeof(bool));


        var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
            new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
            new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));


        var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
            new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
            new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));


        var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
            new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
            new ObjectParameter("PasswordAttemptWindow", typeof(int));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var lastLoginDateParameter = lastLoginDate.HasValue ?
            new ObjectParameter("LastLoginDate", lastLoginDate) :
            new ObjectParameter("LastLoginDate", typeof(System.DateTime));


        var lastActivityDateParameter = lastActivityDate.HasValue ?
            new ObjectParameter("LastActivityDate", lastActivityDate) :
            new ObjectParameter("LastActivityDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
    }


    public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
    {

        var applicationIdParameter = applicationId.HasValue ?
            new ObjectParameter("ApplicationId", applicationId) :
            new ObjectParameter("ApplicationId", typeof(System.Guid));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
    }


    public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
    }


    public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
    {

        var allUsersScopeParameter = allUsersScope.HasValue ?
            new ObjectParameter("AllUsersScope", allUsersScope) :
            new ObjectParameter("AllUsersScope", typeof(bool));


        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
    }


    public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
    {

        var allUsersScopeParameter = allUsersScope.HasValue ?
            new ObjectParameter("AllUsersScope", allUsersScope) :
            new ObjectParameter("AllUsersScope", typeof(bool));


        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
    }


    public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
    {

        var allUsersScopeParameter = allUsersScope.HasValue ?
            new ObjectParameter("AllUsersScope", allUsersScope) :
            new ObjectParameter("AllUsersScope", typeof(bool));


        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
    }


    public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
    }


    public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
    }


    public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
    }


    public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
    }


    public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var pageSettingsParameter = pageSettings != null ?
            new ObjectParameter("PageSettings", pageSettings) :
            new ObjectParameter("PageSettings", typeof(byte[]));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var pageSettingsParameter = pageSettings != null ?
            new ObjectParameter("PageSettings", pageSettings) :
            new ObjectParameter("PageSettings", typeof(byte[]));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
            new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
            new ObjectParameter("ProfileAuthOptions", typeof(int));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNamesParameter = userNames != null ?
            new ObjectParameter("UserNames", userNames) :
            new ObjectParameter("UserNames", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
    }


    public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
            new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
            new ObjectParameter("ProfileAuthOptions", typeof(int));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
    }


    public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
            new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
            new ObjectParameter("ProfileAuthOptions", typeof(int));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var userNameToMatchParameter = userNameToMatch != null ?
            new ObjectParameter("UserNameToMatch", userNameToMatch) :
            new ObjectParameter("UserNameToMatch", typeof(string));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
    }


    public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var propertyNamesParameter = propertyNames != null ?
            new ObjectParameter("PropertyNames", propertyNames) :
            new ObjectParameter("PropertyNames", typeof(string));


        var propertyValuesStringParameter = propertyValuesString != null ?
            new ObjectParameter("PropertyValuesString", propertyValuesString) :
            new ObjectParameter("PropertyValuesString", typeof(string));


        var propertyValuesBinaryParameter = propertyValuesBinary != null ?
            new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
            new ObjectParameter("PropertyValuesBinary", typeof(byte[]));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var isUserAnonymousParameter = isUserAnonymous.HasValue ?
            new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
            new ObjectParameter("IsUserAnonymous", typeof(bool));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
    {

        var featureParameter = feature != null ?
            new ObjectParameter("Feature", feature) :
            new ObjectParameter("Feature", typeof(string));


        var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
            new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
            new ObjectParameter("CompatibleSchemaVersion", typeof(string));


        var isCurrentVersionParameter = isCurrentVersion.HasValue ?
            new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
            new ObjectParameter("IsCurrentVersion", typeof(bool));


        var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
            new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
            new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
    }


    public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
    }


    public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
            new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
            new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
    }


    public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
    }


    public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
    }


    public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
    {

        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
    }


    public virtual int aspnet_Setup_RestorePermissions(string name)
    {

        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
    }


    public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
    {

        var featureParameter = feature != null ?
            new ObjectParameter("Feature", feature) :
            new ObjectParameter("Feature", typeof(string));


        var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
            new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
            new ObjectParameter("CompatibleSchemaVersion", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
    }


    public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
    {

        var applicationIdParameter = applicationId.HasValue ?
            new ObjectParameter("ApplicationId", applicationId) :
            new ObjectParameter("ApplicationId", typeof(System.Guid));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var isUserAnonymousParameter = isUserAnonymous.HasValue ?
            new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
            new ObjectParameter("IsUserAnonymous", typeof(bool));


        var lastActivityDateParameter = lastActivityDate.HasValue ?
            new ObjectParameter("LastActivityDate", lastActivityDate) :
            new ObjectParameter("LastActivityDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
    }


    public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
            new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
            new ObjectParameter("TablesToDeleteFrom", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
    }


    public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNamesParameter = userNames != null ?
            new ObjectParameter("UserNames", userNames) :
            new ObjectParameter("UserNames", typeof(string));


        var roleNamesParameter = roleNames != null ?
            new ObjectParameter("RoleNames", roleNames) :
            new ObjectParameter("RoleNames", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        var userNameToMatchParameter = userNameToMatch != null ?
            new ObjectParameter("UserNameToMatch", userNameToMatch) :
            new ObjectParameter("UserNameToMatch", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
    }


    public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
    }


    public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
    }


    public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
    }


    public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNamesParameter = userNames != null ?
            new ObjectParameter("UserNames", userNames) :
            new ObjectParameter("UserNames", typeof(string));


        var roleNamesParameter = roleNames != null ?
            new ObjectParameter("RoleNames", roleNames) :
            new ObjectParameter("RoleNames", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
    }


    public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
    {

        var eventIdParameter = eventId != null ?
            new ObjectParameter("EventId", eventId) :
            new ObjectParameter("EventId", typeof(string));


        var eventTimeUtcParameter = eventTimeUtc.HasValue ?
            new ObjectParameter("EventTimeUtc", eventTimeUtc) :
            new ObjectParameter("EventTimeUtc", typeof(System.DateTime));


        var eventTimeParameter = eventTime.HasValue ?
            new ObjectParameter("EventTime", eventTime) :
            new ObjectParameter("EventTime", typeof(System.DateTime));


        var eventTypeParameter = eventType != null ?
            new ObjectParameter("EventType", eventType) :
            new ObjectParameter("EventType", typeof(string));


        var eventSequenceParameter = eventSequence.HasValue ?
            new ObjectParameter("EventSequence", eventSequence) :
            new ObjectParameter("EventSequence", typeof(decimal));


        var eventOccurrenceParameter = eventOccurrence.HasValue ?
            new ObjectParameter("EventOccurrence", eventOccurrence) :
            new ObjectParameter("EventOccurrence", typeof(decimal));


        var eventCodeParameter = eventCode.HasValue ?
            new ObjectParameter("EventCode", eventCode) :
            new ObjectParameter("EventCode", typeof(int));


        var eventDetailCodeParameter = eventDetailCode.HasValue ?
            new ObjectParameter("EventDetailCode", eventDetailCode) :
            new ObjectParameter("EventDetailCode", typeof(int));


        var messageParameter = message != null ?
            new ObjectParameter("Message", message) :
            new ObjectParameter("Message", typeof(string));


        var applicationPathParameter = applicationPath != null ?
            new ObjectParameter("ApplicationPath", applicationPath) :
            new ObjectParameter("ApplicationPath", typeof(string));


        var applicationVirtualPathParameter = applicationVirtualPath != null ?
            new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
            new ObjectParameter("ApplicationVirtualPath", typeof(string));


        var machineNameParameter = machineName != null ?
            new ObjectParameter("MachineName", machineName) :
            new ObjectParameter("MachineName", typeof(string));


        var requestUrlParameter = requestUrl != null ?
            new ObjectParameter("RequestUrl", requestUrl) :
            new ObjectParameter("RequestUrl", typeof(string));


        var exceptionTypeParameter = exceptionType != null ?
            new ObjectParameter("ExceptionType", exceptionType) :
            new ObjectParameter("ExceptionType", typeof(string));


        var detailsParameter = details != null ?
            new ObjectParameter("Details", details) :
            new ObjectParameter("Details", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
    }


    public virtual int CreateTempTables()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateTempTables");
    }


    public virtual int DeleteContactCompanybyCompanyId(Nullable<int> companyid)
    {

        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteContactCompanybyCompanyId", companyidParameter);
    }


    public virtual int DeleteEmailtemplatebyId(Nullable<int> templateId)
    {

        var templateIdParameter = templateId.HasValue ?
            new ObjectParameter("TemplateId", templateId) :
            new ObjectParameter("TemplateId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmailtemplatebyId", templateIdParameter);
    }


    public virtual int DeleteExpiredSessions()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExpiredSessions");
    }


    public virtual int GetHashCode(string input, ObjectParameter hash)
    {

        var inputParameter = input != null ?
            new ObjectParameter("input", input) :
            new ObjectParameter("input", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHashCode", inputParameter, hash);
    }


    public virtual int GetMajorVersion(ObjectParameter p_ver)
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMajorVersion", p_ver);
    }


    public virtual ObjectResult<GetNewUsers_Result> GetNewUsers(string applicationName, Nullable<int> max, Nullable<int> date)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var maxParameter = max.HasValue ?
            new ObjectParameter("Max", max) :
            new ObjectParameter("Max", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewUsers_Result>("GetNewUsers", applicationNameParameter, maxParameter, dateParameter);
    }


    public virtual int GetProspectingListByUser(string user)
    {

        var userParameter = user != null ?
            new ObjectParameter("User", user) :
            new ObjectParameter("User", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetProspectingListByUser", userParameter);
    }


    public virtual ObjectResult<string> GetProspectingUserById(Nullable<int> listid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetProspectingUserById", listidParameter);
    }


    public virtual int SpaddContact(string contactfullname, string titlestandard, string contactphone, string contactcellphone, string contactemail, string linkedinprofileurl, string combinednotes, Nullable<int> companyid)
    {

        var contactfullnameParameter = contactfullname != null ?
            new ObjectParameter("contactfullname", contactfullname) :
            new ObjectParameter("contactfullname", typeof(string));


        var titlestandardParameter = titlestandard != null ?
            new ObjectParameter("titlestandard", titlestandard) :
            new ObjectParameter("titlestandard", typeof(string));


        var contactphoneParameter = contactphone != null ?
            new ObjectParameter("contactphone", contactphone) :
            new ObjectParameter("contactphone", typeof(string));


        var contactcellphoneParameter = contactcellphone != null ?
            new ObjectParameter("contactcellphone", contactcellphone) :
            new ObjectParameter("contactcellphone", typeof(string));


        var contactemailParameter = contactemail != null ?
            new ObjectParameter("contactemail", contactemail) :
            new ObjectParameter("contactemail", typeof(string));


        var linkedinprofileurlParameter = linkedinprofileurl != null ?
            new ObjectParameter("linkedinprofileurl", linkedinprofileurl) :
            new ObjectParameter("linkedinprofileurl", typeof(string));


        var combinednotesParameter = combinednotes != null ?
            new ObjectParameter("combinednotes", combinednotes) :
            new ObjectParameter("combinednotes", typeof(string));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpaddContact", contactfullnameParameter, titlestandardParameter, contactphoneParameter, contactcellphoneParameter, contactemailParameter, linkedinprofileurlParameter, combinednotesParameter, companyidParameter);
    }


    public virtual ObjectResult<Nullable<int>> SpaddContactClient(string contactfullname, string titlestandard, string contactphone, string contactcellphone, string contactemail, string linkedinprofileurl, string combinednotes, Nullable<int> companyid, string adminnotes, string contactnotes, string userid, ObjectParameter newContactID)
    {

        var contactfullnameParameter = contactfullname != null ?
            new ObjectParameter("contactfullname", contactfullname) :
            new ObjectParameter("contactfullname", typeof(string));


        var titlestandardParameter = titlestandard != null ?
            new ObjectParameter("titlestandard", titlestandard) :
            new ObjectParameter("titlestandard", typeof(string));


        var contactphoneParameter = contactphone != null ?
            new ObjectParameter("contactphone", contactphone) :
            new ObjectParameter("contactphone", typeof(string));


        var contactcellphoneParameter = contactcellphone != null ?
            new ObjectParameter("contactcellphone", contactcellphone) :
            new ObjectParameter("contactcellphone", typeof(string));


        var contactemailParameter = contactemail != null ?
            new ObjectParameter("contactemail", contactemail) :
            new ObjectParameter("contactemail", typeof(string));


        var linkedinprofileurlParameter = linkedinprofileurl != null ?
            new ObjectParameter("linkedinprofileurl", linkedinprofileurl) :
            new ObjectParameter("linkedinprofileurl", typeof(string));


        var combinednotesParameter = combinednotes != null ?
            new ObjectParameter("combinednotes", combinednotes) :
            new ObjectParameter("combinednotes", typeof(string));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        var adminnotesParameter = adminnotes != null ?
            new ObjectParameter("adminnotes", adminnotes) :
            new ObjectParameter("adminnotes", typeof(string));


        var contactnotesParameter = contactnotes != null ?
            new ObjectParameter("contactnotes", contactnotes) :
            new ObjectParameter("contactnotes", typeof(string));


        var useridParameter = userid != null ?
            new ObjectParameter("Userid", userid) :
            new ObjectParameter("Userid", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpaddContactClient", contactfullnameParameter, titlestandardParameter, contactphoneParameter, contactcellphoneParameter, contactemailParameter, linkedinprofileurlParameter, combinednotesParameter, companyidParameter, adminnotesParameter, contactnotesParameter, useridParameter, newContactID);
    }


    public virtual ObjectResult<SpContactFilterClient_Result> SpContactFilterClient(Nullable<int> listid, Nullable<int> companyid, string username)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        var usernameParameter = username != null ?
            new ObjectParameter("username", username) :
            new ObjectParameter("username", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpContactFilterClient_Result>("SpContactFilterClient", listidParameter, companyidParameter, usernameParameter);
    }


    public virtual ObjectResult<Spcontexport_Result> Spcontexport(Nullable<int> listid, string bizType)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        var bizTypeParameter = bizType != null ?
            new ObjectParameter("bizType", bizType) :
            new ObjectParameter("bizType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spcontexport_Result>("Spcontexport", listidParameter, bizTypeParameter);
    }


    public virtual ObjectResult<Spcontexportclient_Result> Spcontexportclient(Nullable<int> listid, string bizType)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        var bizTypeParameter = bizType != null ?
            new ObjectParameter("bizType", bizType) :
            new ObjectParameter("bizType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spcontexportclient_Result>("Spcontexportclient", listidParameter, bizTypeParameter);
    }


    public virtual int SpcreatenewJob(string jobtitle, string jobdescr, string submittals, Nullable<int> whiteboardID, Nullable<int> rowNumber)
    {

        var jobtitleParameter = jobtitle != null ?
            new ObjectParameter("jobtitle", jobtitle) :
            new ObjectParameter("jobtitle", typeof(string));


        var jobdescrParameter = jobdescr != null ?
            new ObjectParameter("jobdescr", jobdescr) :
            new ObjectParameter("jobdescr", typeof(string));


        var submittalsParameter = submittals != null ?
            new ObjectParameter("submittals", submittals) :
            new ObjectParameter("submittals", typeof(string));


        var whiteboardIDParameter = whiteboardID.HasValue ?
            new ObjectParameter("WhiteboardID", whiteboardID) :
            new ObjectParameter("WhiteboardID", typeof(int));


        var rowNumberParameter = rowNumber.HasValue ?
            new ObjectParameter("RowNumber", rowNumber) :
            new ObjectParameter("RowNumber", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpcreatenewJob", jobtitleParameter, jobdescrParameter, submittalsParameter, whiteboardIDParameter, rowNumberParameter);
    }


    public virtual int SPdeleteContact(Nullable<int> contactId)
    {

        var contactIdParameter = contactId.HasValue ?
            new ObjectParameter("ContactId", contactId) :
            new ObjectParameter("ContactId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPdeleteContact", contactIdParameter);
    }


    public virtual int Spdeletedatauserprospecting(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Spdeletedatauserprospecting", idParameter);
    }


    public virtual int SpDeleteEmailTemplate(Nullable<int> templateId)
    {

        var templateIdParameter = templateId.HasValue ?
            new ObjectParameter("TemplateId", templateId) :
            new ObjectParameter("TemplateId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteEmailTemplate", templateIdParameter);
    }


    public virtual int spdeletejob(Nullable<int> jobid)
    {

        var jobidParameter = jobid.HasValue ?
            new ObjectParameter("jobid", jobid) :
            new ObjectParameter("jobid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spdeletejob", jobidParameter);
    }


    public virtual int SpdeleteProspect(Nullable<int> listid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpdeleteProspect", listidParameter);
    }


    public virtual int SPDeleteUser(Nullable<System.Guid> userid, string userName)
    {

        var useridParameter = userid.HasValue ?
            new ObjectParameter("Userid", userid) :
            new ObjectParameter("Userid", typeof(System.Guid));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteUser", useridParameter, userNameParameter);
    }


    public virtual int SPErrorLog(string error, string functionInformation, string clientID, string url)
    {

        var errorParameter = error != null ?
            new ObjectParameter("Error", error) :
            new ObjectParameter("Error", typeof(string));


        var functionInformationParameter = functionInformation != null ?
            new ObjectParameter("FunctionInformation", functionInformation) :
            new ObjectParameter("FunctionInformation", typeof(string));


        var clientIDParameter = clientID != null ?
            new ObjectParameter("ClientID", clientID) :
            new ObjectParameter("ClientID", typeof(string));


        var urlParameter = url != null ?
            new ObjectParameter("Url", url) :
            new ObjectParameter("Url", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPErrorLog", errorParameter, functionInformationParameter, clientIDParameter, urlParameter);
    }


    public virtual ObjectResult<string> SPgetbiztype(Nullable<int> listid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPgetbiztype", listidParameter);
    }


    public virtual ObjectResult<string> Spgetbiztypeemail()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Spgetbiztypeemail");
    }


    public virtual ObjectResult<string> SPgetcitycircle(Nullable<int> listid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPgetcitycircle", listidParameter);
    }


    public virtual ObjectResult<string> Spgetcitycircleemail()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Spgetcitycircleemail");
    }


    public virtual ObjectResult<string> SPgetCitycirclelist(Nullable<int> listid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPgetCitycirclelist", listidParameter);
    }


    public virtual ObjectResult<Spgetclientnote_Result> Spgetclientnote(Nullable<int> contactid, string userName)
    {

        var contactidParameter = contactid.HasValue ?
            new ObjectParameter("contactid", contactid) :
            new ObjectParameter("contactid", typeof(int));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spgetclientnote_Result>("Spgetclientnote", contactidParameter, userNameParameter);
    }


    public virtual ObjectResult<SPgetCompanies_Result> SPgetCompanies(Nullable<int> listid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetCompanies_Result>("SPgetCompanies", listidParameter);
    }


    public virtual ObjectResult<Spgetcompanydetailsbycompanyid_Result> Spgetcompanydetailsbycompanyid(Nullable<int> companyid)
    {

        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spgetcompanydetailsbycompanyid_Result>("Spgetcompanydetailsbycompanyid", companyidParameter);
    }


    public virtual ObjectResult<SPgetCompdetailsbycompid_Result> SPgetCompdetailsbycompid(Nullable<int> companyid)
    {

        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetCompdetailsbycompid_Result>("SPgetCompdetailsbycompid", companyidParameter);
    }


    public virtual ObjectResult<SPgetconformailwithoutbiztype_Result> SPgetconformailwithoutbiztype(Nullable<int> prospectList, string titleStandard)
    {

        var prospectListParameter = prospectList.HasValue ?
            new ObjectParameter("prospectList", prospectList) :
            new ObjectParameter("prospectList", typeof(int));


        var titleStandardParameter = titleStandard != null ?
            new ObjectParameter("titleStandard", titleStandard) :
            new ObjectParameter("titleStandard", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetconformailwithoutbiztype_Result>("SPgetconformailwithoutbiztype", prospectListParameter, titleStandardParameter);
    }


    public virtual ObjectResult<SpGetContactDataforedit_Result> SpGetContactDataforedit(Nullable<int> contactid)
    {

        var contactidParameter = contactid.HasValue ?
            new ObjectParameter("contactid", contactid) :
            new ObjectParameter("contactid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetContactDataforedit_Result>("SpGetContactDataforedit", contactidParameter);
    }


    public virtual ObjectResult<SpGetContactDataforeditClient_Result> SpGetContactDataforeditClient(Nullable<int> contactId, string userName, Nullable<int> companyid)
    {

        var contactIdParameter = contactId.HasValue ?
            new ObjectParameter("ContactId", contactId) :
            new ObjectParameter("ContactId", typeof(int));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetContactDataforeditClient_Result>("SpGetContactDataforeditClient", contactIdParameter, userNameParameter, companyidParameter);
    }


    public virtual ObjectResult<spgetcontactforclient_Result> spgetcontactforclient(string username, Nullable<int> companyid)
    {

        var usernameParameter = username != null ?
            new ObjectParameter("username", username) :
            new ObjectParameter("username", typeof(string));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spgetcontactforclient_Result>("spgetcontactforclient", usernameParameter, companyidParameter);
    }


    public virtual ObjectResult<SPgetcontactformailsend_Result> SPgetcontactformailsend(Nullable<int> prospectList, string biztype, string titleStandard)
    {

        var prospectListParameter = prospectList.HasValue ?
            new ObjectParameter("prospectList", prospectList) :
            new ObjectParameter("prospectList", typeof(int));


        var biztypeParameter = biztype != null ?
            new ObjectParameter("biztype", biztype) :
            new ObjectParameter("biztype", typeof(string));


        var titleStandardParameter = titleStandard != null ?
            new ObjectParameter("titleStandard", titleStandard) :
            new ObjectParameter("titleStandard", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetcontactformailsend_Result>("SPgetcontactformailsend", prospectListParameter, biztypeParameter, titleStandardParameter);
    }


    public virtual ObjectResult<SpGetContactlistbyCompid_Result> SpGetContactlistbyCompid(Nullable<int> companyid, Nullable<int> listid)
    {

        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetContactlistbyCompid_Result>("SpGetContactlistbyCompid", companyidParameter, listidParameter);
    }


    public virtual ObjectResult<Spgetcontactlistforexpert_Result> Spgetcontactlistforexpert(Nullable<int> listid, string bizType)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        var bizTypeParameter = bizType != null ?
            new ObjectParameter("bizType", bizType) :
            new ObjectParameter("bizType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spgetcontactlistforexpert_Result>("Spgetcontactlistforexpert", listidParameter, bizTypeParameter);
    }


    public virtual ObjectResult<SpGetdataforexcelexport_Result> SpGetdataforexcelexport(Nullable<int> listid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetdataforexcelexport_Result>("SpGetdataforexcelexport", listidParameter);
    }


    public virtual ObjectResult<SPgetemailtemplatebytemplateid_Result> SPgetemailtemplatebytemplateid(Nullable<int> templateId)
    {

        var templateIdParameter = templateId.HasValue ?
            new ObjectParameter("TemplateId", templateId) :
            new ObjectParameter("TemplateId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetemailtemplatebytemplateid_Result>("SPgetemailtemplatebytemplateid", templateIdParameter);
    }


    public virtual ObjectResult<SpGetEmailtemplatelist_Result> SpGetEmailtemplatelist()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmailtemplatelist_Result>("SpGetEmailtemplatelist");
    }


    public virtual ObjectResult<spgetjobdetailbyjobid_Result> spgetjobdetailbyjobid(Nullable<int> jobid)
    {

        var jobidParameter = jobid.HasValue ?
            new ObjectParameter("jobid", jobid) :
            new ObjectParameter("jobid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spgetjobdetailbyjobid_Result>("spgetjobdetailbyjobid", jobidParameter);
    }


    public virtual ObjectResult<SpGetJobdetailsbyWbid_Result> SpGetJobdetailsbyWbid(Nullable<int> whiteboardID)
    {

        var whiteboardIDParameter = whiteboardID.HasValue ?
            new ObjectParameter("WhiteboardID", whiteboardID) :
            new ObjectParameter("WhiteboardID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJobdetailsbyWbid_Result>("SpGetJobdetailsbyWbid", whiteboardIDParameter);
    }


    public virtual ObjectResult<string> SPgetprospectinglistbyuserid(string userId)
    {

        var userIdParameter = userId != null ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPgetprospectinglistbyuserid", userIdParameter);
    }


    public virtual ObjectResult<SpGetprospectinglistforclient_Result> SpGetprospectinglistforclient(string user)
    {

        var userParameter = user != null ?
            new ObjectParameter("User", user) :
            new ObjectParameter("User", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetprospectinglistforclient_Result>("SpGetprospectinglistforclient", userParameter);
    }


    public virtual ObjectResult<SPgetProspectinglists_Result> SPgetProspectinglists()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetProspectinglists_Result>("SPgetProspectinglists");
    }


    public virtual ObjectResult<SpgetProspectingselectlist_Result> SpgetProspectingselectlist()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpgetProspectingselectlist_Result>("SpgetProspectingselectlist");
    }


    public virtual ObjectResult<SPGetProspectlist_Result> SPGetProspectlist()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetProspectlist_Result>("SPGetProspectlist");
    }


    public virtual ObjectResult<SPGetProspectlistTest_Result> SPGetProspectlistTest(Nullable<int> pageno, Nullable<int> pageSize)
    {

        var pagenoParameter = pageno.HasValue ?
            new ObjectParameter("pageno", pageno) :
            new ObjectParameter("pageno", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetProspectlistTest_Result>("SPGetProspectlistTest", pagenoParameter, pageSizeParameter);
    }


    public virtual ObjectResult<SpgetProspectViewList_Result> SpgetProspectViewList(Nullable<int> listid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpgetProspectViewList_Result>("SpgetProspectViewList", listidParameter);
    }


    public virtual ObjectResult<SpgetProspectViewListTest_Result> SpgetProspectViewListTest(Nullable<int> listid, Nullable<int> pageno, Nullable<int> pageSize)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        var pagenoParameter = pageno.HasValue ?
            new ObjectParameter("pageno", pageno) :
            new ObjectParameter("pageno", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpgetProspectViewListTest_Result>("SpgetProspectViewListTest", listidParameter, pagenoParameter, pageSizeParameter);
    }


    public virtual ObjectResult<SpGetprosviewlistclient_Result> SpGetprosviewlistclient(Nullable<int> listid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetprosviewlistclient_Result>("SpGetprosviewlistclient", listidParameter);
    }


    public virtual ObjectResult<SpgetRolelist_Result> SpgetRolelist()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpgetRolelist_Result>("SpgetRolelist");
    }


    public virtual ObjectResult<SpgetRoles_Result> SpgetRoles(string applicationName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpgetRoles_Result>("SpgetRoles", applicationNameParameter);
    }


    public virtual ObjectResult<string> SPgettitle()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPgettitle");
    }


    public virtual ObjectResult<Spgetusers_Result> Spgetusers()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spgetusers_Result>("Spgetusers");
    }


    public virtual ObjectResult<SpGetwhiteBoard_Result> SpGetwhiteBoard()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetwhiteBoard_Result>("SpGetwhiteBoard");
    }


    public virtual int SpInsertclientnote(Nullable<int> contactid, string userName, string clientNotes)
    {

        var contactidParameter = contactid.HasValue ?
            new ObjectParameter("contactid", contactid) :
            new ObjectParameter("contactid", typeof(int));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var clientNotesParameter = clientNotes != null ?
            new ObjectParameter("ClientNotes", clientNotes) :
            new ObjectParameter("ClientNotes", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertclientnote", contactidParameter, userNameParameter, clientNotesParameter);
    }


    public virtual int SPInsertCompanies(string citycircle, string biztype, string name, string addr1, string addr2, string city, string state, string zip, string weburl, string phone, Nullable<bool> priority, Nullable<bool> target, string combinednotes, string adminnotes, string notes, Nullable<int> listid)
    {

        var citycircleParameter = citycircle != null ?
            new ObjectParameter("citycircle", citycircle) :
            new ObjectParameter("citycircle", typeof(string));


        var biztypeParameter = biztype != null ?
            new ObjectParameter("biztype", biztype) :
            new ObjectParameter("biztype", typeof(string));


        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        var addr1Parameter = addr1 != null ?
            new ObjectParameter("addr1", addr1) :
            new ObjectParameter("addr1", typeof(string));


        var addr2Parameter = addr2 != null ?
            new ObjectParameter("addr2", addr2) :
            new ObjectParameter("addr2", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("city", city) :
            new ObjectParameter("city", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("state", state) :
            new ObjectParameter("state", typeof(string));


        var zipParameter = zip != null ?
            new ObjectParameter("zip", zip) :
            new ObjectParameter("zip", typeof(string));


        var weburlParameter = weburl != null ?
            new ObjectParameter("weburl", weburl) :
            new ObjectParameter("weburl", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("phone", phone) :
            new ObjectParameter("phone", typeof(string));


        var priorityParameter = priority.HasValue ?
            new ObjectParameter("priority", priority) :
            new ObjectParameter("priority", typeof(bool));


        var targetParameter = target.HasValue ?
            new ObjectParameter("target", target) :
            new ObjectParameter("target", typeof(bool));


        var combinednotesParameter = combinednotes != null ?
            new ObjectParameter("combinednotes", combinednotes) :
            new ObjectParameter("combinednotes", typeof(string));


        var adminnotesParameter = adminnotes != null ?
            new ObjectParameter("adminnotes", adminnotes) :
            new ObjectParameter("adminnotes", typeof(string));


        var notesParameter = notes != null ?
            new ObjectParameter("notes", notes) :
            new ObjectParameter("notes", typeof(string));


        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInsertCompanies", citycircleParameter, biztypeParameter, nameParameter, addr1Parameter, addr2Parameter, cityParameter, stateParameter, zipParameter, weburlParameter, phoneParameter, priorityParameter, targetParameter, combinednotesParameter, adminnotesParameter, notesParameter, listidParameter);
    }


    public virtual int SPinsertCompanyClient(string citycircle, string biztype, string name, string addr1, string addr2, string city, string state, string zip, string weburl, string phone, Nullable<bool> priority, Nullable<bool> target, string combinednotes, string adminnotes, string notes, Nullable<int> listid, string userid)
    {

        var citycircleParameter = citycircle != null ?
            new ObjectParameter("citycircle", citycircle) :
            new ObjectParameter("citycircle", typeof(string));


        var biztypeParameter = biztype != null ?
            new ObjectParameter("biztype", biztype) :
            new ObjectParameter("biztype", typeof(string));


        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        var addr1Parameter = addr1 != null ?
            new ObjectParameter("addr1", addr1) :
            new ObjectParameter("addr1", typeof(string));


        var addr2Parameter = addr2 != null ?
            new ObjectParameter("addr2", addr2) :
            new ObjectParameter("addr2", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("city", city) :
            new ObjectParameter("city", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("state", state) :
            new ObjectParameter("state", typeof(string));


        var zipParameter = zip != null ?
            new ObjectParameter("zip", zip) :
            new ObjectParameter("zip", typeof(string));


        var weburlParameter = weburl != null ?
            new ObjectParameter("weburl", weburl) :
            new ObjectParameter("weburl", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("phone", phone) :
            new ObjectParameter("phone", typeof(string));


        var priorityParameter = priority.HasValue ?
            new ObjectParameter("priority", priority) :
            new ObjectParameter("priority", typeof(bool));


        var targetParameter = target.HasValue ?
            new ObjectParameter("target", target) :
            new ObjectParameter("target", typeof(bool));


        var combinednotesParameter = combinednotes != null ?
            new ObjectParameter("combinednotes", combinednotes) :
            new ObjectParameter("combinednotes", typeof(string));


        var adminnotesParameter = adminnotes != null ?
            new ObjectParameter("adminnotes", adminnotes) :
            new ObjectParameter("adminnotes", typeof(string));


        var notesParameter = notes != null ?
            new ObjectParameter("notes", notes) :
            new ObjectParameter("notes", typeof(string));


        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        var useridParameter = userid != null ?
            new ObjectParameter("Userid", userid) :
            new ObjectParameter("Userid", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPinsertCompanyClient", citycircleParameter, biztypeParameter, nameParameter, addr1Parameter, addr2Parameter, cityParameter, stateParameter, zipParameter, weburlParameter, phoneParameter, priorityParameter, targetParameter, combinednotesParameter, adminnotesParameter, notesParameter, listidParameter, useridParameter);
    }


    public virtual int SpInsertEmailTemplate(string templateName, string subject, Nullable<int> groupingNumber, string emailBody, string emailBodyTextArea, string isTextorHtml)
    {

        var templateNameParameter = templateName != null ?
            new ObjectParameter("TemplateName", templateName) :
            new ObjectParameter("TemplateName", typeof(string));


        var subjectParameter = subject != null ?
            new ObjectParameter("Subject", subject) :
            new ObjectParameter("Subject", typeof(string));


        var groupingNumberParameter = groupingNumber.HasValue ?
            new ObjectParameter("GroupingNumber", groupingNumber) :
            new ObjectParameter("GroupingNumber", typeof(int));


        var emailBodyParameter = emailBody != null ?
            new ObjectParameter("EmailBody", emailBody) :
            new ObjectParameter("EmailBody", typeof(string));


        var emailBodyTextAreaParameter = emailBodyTextArea != null ?
            new ObjectParameter("EmailBodyTextArea", emailBodyTextArea) :
            new ObjectParameter("EmailBodyTextArea", typeof(string));


        var isTextorHtmlParameter = isTextorHtml != null ?
            new ObjectParameter("IsTextorHtml", isTextorHtml) :
            new ObjectParameter("IsTextorHtml", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertEmailTemplate", templateNameParameter, subjectParameter, groupingNumberParameter, emailBodyParameter, emailBodyTextAreaParameter, isTextorHtmlParameter);
    }


    public virtual int SPInsertProspectlist(string listname, Nullable<byte> restricted, string userid)
    {

        var listnameParameter = listname != null ?
            new ObjectParameter("listname", listname) :
            new ObjectParameter("listname", typeof(string));
            new ObjectParameter("group_number", typeof(decimal));



            var restrictedParameter = restricted.HasValue ?
            new ObjectParameter("restricted", restricted) :
            new ObjectParameter("restricted", typeof(byte));

           // var groupnumberParameter = group_number.HasValue ?
           //new ObjectParameter("group_number", restricted) :
           //new ObjectParameter("group_number", typeof(decimal));

            var useridParameter = userid != null ?
            new ObjectParameter("Userid", userid) :
            new ObjectParameter("Userid", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInsertProspectlist", listnameParameter, restrictedParameter, useridParameter);
    }


    public virtual int SpInsertUserPRos(string userId, string listid)
    {

        var userIdParameter = userId != null ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(string));


        var listidParameter = listid != null ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertUserPRos", userIdParameter, listidParameter);
    }


    public virtual int SpMoveContact(Nullable<int> companyid, Nullable<int> contactid, Nullable<int> companyidold)
    {

        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        var contactidParameter = contactid.HasValue ?
            new ObjectParameter("contactid", contactid) :
            new ObjectParameter("contactid", typeof(int));


        var companyidoldParameter = companyidold.HasValue ?
            new ObjectParameter("companyidold", companyidold) :
            new ObjectParameter("companyidold", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpMoveContact", companyidParameter, contactidParameter, companyidoldParameter);
    }


    public virtual int Spupdateclientnote(Nullable<int> contactid, string userName, string clientNotes)
    {

        var contactidParameter = contactid.HasValue ?
            new ObjectParameter("contactid", contactid) :
            new ObjectParameter("contactid", typeof(int));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var clientNotesParameter = clientNotes != null ?
            new ObjectParameter("ClientNotes", clientNotes) :
            new ObjectParameter("ClientNotes", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Spupdateclientnote", contactidParameter, userNameParameter, clientNotesParameter);
    }


    public virtual int SPupdateCompanies(string citycircle, string biztype, string name, string addr1, string addr2, string city, string state, string zip, string weburl, string phone, Nullable<bool> priority, Nullable<bool> target, string combinednotes, string adminnotes, string notes, Nullable<int> companyid, Nullable<int> listid)
    {

        var citycircleParameter = citycircle != null ?
            new ObjectParameter("citycircle", citycircle) :
            new ObjectParameter("citycircle", typeof(string));


        var biztypeParameter = biztype != null ?
            new ObjectParameter("biztype", biztype) :
            new ObjectParameter("biztype", typeof(string));


        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        var addr1Parameter = addr1 != null ?
            new ObjectParameter("addr1", addr1) :
            new ObjectParameter("addr1", typeof(string));


        var addr2Parameter = addr2 != null ?
            new ObjectParameter("addr2", addr2) :
            new ObjectParameter("addr2", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("city", city) :
            new ObjectParameter("city", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("state", state) :
            new ObjectParameter("state", typeof(string));


        var zipParameter = zip != null ?
            new ObjectParameter("zip", zip) :
            new ObjectParameter("zip", typeof(string));


        var weburlParameter = weburl != null ?
            new ObjectParameter("weburl", weburl) :
            new ObjectParameter("weburl", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("phone", phone) :
            new ObjectParameter("phone", typeof(string));


        var priorityParameter = priority.HasValue ?
            new ObjectParameter("priority", priority) :
            new ObjectParameter("priority", typeof(bool));


        var targetParameter = target.HasValue ?
            new ObjectParameter("target", target) :
            new ObjectParameter("target", typeof(bool));


        var combinednotesParameter = combinednotes != null ?
            new ObjectParameter("combinednotes", combinednotes) :
            new ObjectParameter("combinednotes", typeof(string));


        var adminnotesParameter = adminnotes != null ?
            new ObjectParameter("adminnotes", adminnotes) :
            new ObjectParameter("adminnotes", typeof(string));


        var notesParameter = notes != null ?
            new ObjectParameter("notes", notes) :
            new ObjectParameter("notes", typeof(string));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPupdateCompanies", citycircleParameter, biztypeParameter, nameParameter, addr1Parameter, addr2Parameter, cityParameter, stateParameter, zipParameter, weburlParameter, phoneParameter, priorityParameter, targetParameter, combinednotesParameter, adminnotesParameter, notesParameter, companyidParameter, listidParameter);
    }


    public virtual int SpupdateContact(string contactfullname, string titlestandard, string contactphone, string contactcellphone, string contactemail, string linkedinprofileurl, string combinednotes, Nullable<int> contactid)
    {

        var contactfullnameParameter = contactfullname != null ?
            new ObjectParameter("contactfullname", contactfullname) :
            new ObjectParameter("contactfullname", typeof(string));


        var titlestandardParameter = titlestandard != null ?
            new ObjectParameter("titlestandard", titlestandard) :
            new ObjectParameter("titlestandard", typeof(string));


        var contactphoneParameter = contactphone != null ?
            new ObjectParameter("contactphone", contactphone) :
            new ObjectParameter("contactphone", typeof(string));


        var contactcellphoneParameter = contactcellphone != null ?
            new ObjectParameter("contactcellphone", contactcellphone) :
            new ObjectParameter("contactcellphone", typeof(string));


        var contactemailParameter = contactemail != null ?
            new ObjectParameter("contactemail", contactemail) :
            new ObjectParameter("contactemail", typeof(string));


        var linkedinprofileurlParameter = linkedinprofileurl != null ?
            new ObjectParameter("linkedinprofileurl", linkedinprofileurl) :
            new ObjectParameter("linkedinprofileurl", typeof(string));


        var combinednotesParameter = combinednotes != null ?
            new ObjectParameter("combinednotes", combinednotes) :
            new ObjectParameter("combinednotes", typeof(string));


        var contactidParameter = contactid.HasValue ?
            new ObjectParameter("contactid", contactid) :
            new ObjectParameter("contactid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpupdateContact", contactfullnameParameter, titlestandardParameter, contactphoneParameter, contactcellphoneParameter, contactemailParameter, linkedinprofileurlParameter, combinednotesParameter, contactidParameter);
    }


    public virtual int SpupdateContactClient(string contactfullname, string titlestandard, string contactphone, string contactcellphone, string contactemail, string linkedinprofileurl, string combinednotes, Nullable<int> contactid, string adminnotes)
    {

        var contactfullnameParameter = contactfullname != null ?
            new ObjectParameter("contactfullname", contactfullname) :
            new ObjectParameter("contactfullname", typeof(string));


        var titlestandardParameter = titlestandard != null ?
            new ObjectParameter("titlestandard", titlestandard) :
            new ObjectParameter("titlestandard", typeof(string));


        var contactphoneParameter = contactphone != null ?
            new ObjectParameter("contactphone", contactphone) :
            new ObjectParameter("contactphone", typeof(string));


        var contactcellphoneParameter = contactcellphone != null ?
            new ObjectParameter("contactcellphone", contactcellphone) :
            new ObjectParameter("contactcellphone", typeof(string));


        var contactemailParameter = contactemail != null ?
            new ObjectParameter("contactemail", contactemail) :
            new ObjectParameter("contactemail", typeof(string));


        var linkedinprofileurlParameter = linkedinprofileurl != null ?
            new ObjectParameter("linkedinprofileurl", linkedinprofileurl) :
            new ObjectParameter("linkedinprofileurl", typeof(string));


        var combinednotesParameter = combinednotes != null ?
            new ObjectParameter("combinednotes", combinednotes) :
            new ObjectParameter("combinednotes", typeof(string));


        var contactidParameter = contactid.HasValue ?
            new ObjectParameter("contactid", contactid) :
            new ObjectParameter("contactid", typeof(int));


        var adminnotesParameter = adminnotes != null ?
            new ObjectParameter("adminnotes", adminnotes) :
            new ObjectParameter("adminnotes", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpupdateContactClient", contactfullnameParameter, titlestandardParameter, contactphoneParameter, contactcellphoneParameter, contactemailParameter, linkedinprofileurlParameter, combinednotesParameter, contactidParameter, adminnotesParameter);
    }


    public virtual int spupdatecontactresumes(string resumes, Nullable<int> contactid)
    {

        var resumesParameter = resumes != null ?
            new ObjectParameter("resumes", resumes) :
            new ObjectParameter("resumes", typeof(string));


        var contactidParameter = contactid.HasValue ?
            new ObjectParameter("contactid", contactid) :
            new ObjectParameter("contactid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spupdatecontactresumes", resumesParameter, contactidParameter);
    }


    public virtual int SpUpdateEmailTemplate(string templateName, string subject, Nullable<int> groupingNumber, string emailBody, string emailBodyTextArea, string isTextorHtml, Nullable<int> templateId)
    {

        var templateNameParameter = templateName != null ?
            new ObjectParameter("TemplateName", templateName) :
            new ObjectParameter("TemplateName", typeof(string));


        var subjectParameter = subject != null ?
            new ObjectParameter("Subject", subject) :
            new ObjectParameter("Subject", typeof(string));


        var groupingNumberParameter = groupingNumber.HasValue ?
            new ObjectParameter("GroupingNumber", groupingNumber) :
            new ObjectParameter("GroupingNumber", typeof(int));


        var emailBodyParameter = emailBody != null ?
            new ObjectParameter("EmailBody", emailBody) :
            new ObjectParameter("EmailBody", typeof(string));


        var emailBodyTextAreaParameter = emailBodyTextArea != null ?
            new ObjectParameter("EmailBodyTextArea", emailBodyTextArea) :
            new ObjectParameter("EmailBodyTextArea", typeof(string));


        var isTextorHtmlParameter = isTextorHtml != null ?
            new ObjectParameter("IsTextorHtml", isTextorHtml) :
            new ObjectParameter("IsTextorHtml", typeof(string));


        var templateIdParameter = templateId.HasValue ?
            new ObjectParameter("TemplateId", templateId) :
            new ObjectParameter("TemplateId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateEmailTemplate", templateNameParameter, subjectParameter, groupingNumberParameter, emailBodyParameter, emailBodyTextAreaParameter, isTextorHtmlParameter, templateIdParameter);
    }


    public virtual int Spupdatejob(string jobtitle, string jobdescr, string submittals, Nullable<int> jobid, Nullable<int> rowNumber)
    {

        var jobtitleParameter = jobtitle != null ?
            new ObjectParameter("jobtitle", jobtitle) :
            new ObjectParameter("jobtitle", typeof(string));


        var jobdescrParameter = jobdescr != null ?
            new ObjectParameter("jobdescr", jobdescr) :
            new ObjectParameter("jobdescr", typeof(string));


        var submittalsParameter = submittals != null ?
            new ObjectParameter("submittals", submittals) :
            new ObjectParameter("submittals", typeof(string));


        var jobidParameter = jobid.HasValue ?
            new ObjectParameter("jobid", jobid) :
            new ObjectParameter("jobid", typeof(int));


        var rowNumberParameter = rowNumber.HasValue ?
            new ObjectParameter("RowNumber", rowNumber) :
            new ObjectParameter("RowNumber", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Spupdatejob", jobtitleParameter, jobdescrParameter, submittalsParameter, jobidParameter, rowNumberParameter);
    }


    public virtual int SPUpdateProspectList(string listname, Nullable<byte> restricted, Nullable<int> listid)
    {

        var listnameParameter = listname != null ?
            new ObjectParameter("listname", listname) :
            new ObjectParameter("listname", typeof(string));


        var restrictedParameter = restricted.HasValue ?
            new ObjectParameter("restricted", restricted) :
            new ObjectParameter("restricted", typeof(byte));


        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPUpdateProspectList", listnameParameter, restrictedParameter, listidParameter);
    }


    public virtual int SpUpdateUserPRos(string userId, string listid)
    {

        var userIdParameter = userId != null ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(string));


        var listidParameter = listid != null ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateUserPRos", userIdParameter, listidParameter);
    }


    public virtual int SpupdatewhiteBoard(string whiteboardName, Nullable<int> wBId)
    {

        var whiteboardNameParameter = whiteboardName != null ?
            new ObjectParameter("WhiteboardName", whiteboardName) :
            new ObjectParameter("WhiteboardName", typeof(string));


        var wBIdParameter = wBId.HasValue ?
            new ObjectParameter("WBId", wBId) :
            new ObjectParameter("WBId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpupdatewhiteBoard", whiteboardNameParameter, wBIdParameter);
    }


    public virtual int TempGetAppID(string appName, ObjectParameter appId)
    {

        var appNameParameter = appName != null ?
            new ObjectParameter("appName", appName) :
            new ObjectParameter("appName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempGetAppID", appNameParameter, appId);
    }


    public virtual ObjectResult<byte[]> TempGetStateItem(string id, ObjectParameter itemShort, ObjectParameter locked, ObjectParameter lockDate, ObjectParameter lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("TempGetStateItem", idParameter, itemShort, locked, lockDate, lockCookie);
    }


    public virtual ObjectResult<byte[]> TempGetStateItem2(string id, ObjectParameter itemShort, ObjectParameter locked, ObjectParameter lockAge, ObjectParameter lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("TempGetStateItem2", idParameter, itemShort, locked, lockAge, lockCookie);
    }


    public virtual ObjectResult<byte[]> TempGetStateItem3(string id, ObjectParameter itemShort, ObjectParameter locked, ObjectParameter lockAge, ObjectParameter lockCookie, ObjectParameter actionFlags)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("TempGetStateItem3", idParameter, itemShort, locked, lockAge, lockCookie, actionFlags);
    }


    public virtual ObjectResult<byte[]> TempGetStateItemExclusive(string id, ObjectParameter itemShort, ObjectParameter locked, ObjectParameter lockDate, ObjectParameter lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("TempGetStateItemExclusive", idParameter, itemShort, locked, lockDate, lockCookie);
    }


    public virtual ObjectResult<byte[]> TempGetStateItemExclusive2(string id, ObjectParameter itemShort, ObjectParameter locked, ObjectParameter lockAge, ObjectParameter lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("TempGetStateItemExclusive2", idParameter, itemShort, locked, lockAge, lockCookie);
    }


    public virtual ObjectResult<byte[]> TempGetStateItemExclusive3(string id, ObjectParameter itemShort, ObjectParameter locked, ObjectParameter lockAge, ObjectParameter lockCookie, ObjectParameter actionFlags)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("TempGetStateItemExclusive3", idParameter, itemShort, locked, lockAge, lockCookie, actionFlags);
    }


    public virtual int TempGetVersion(ObjectParameter ver)
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempGetVersion", ver);
    }


    public virtual int TempInsertStateItemLong(string id, byte[] itemLong, Nullable<int> timeout)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var itemLongParameter = itemLong != null ?
            new ObjectParameter("itemLong", itemLong) :
            new ObjectParameter("itemLong", typeof(byte[]));


        var timeoutParameter = timeout.HasValue ?
            new ObjectParameter("timeout", timeout) :
            new ObjectParameter("timeout", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempInsertStateItemLong", idParameter, itemLongParameter, timeoutParameter);
    }


    public virtual int TempInsertStateItemShort(string id, byte[] itemShort, Nullable<int> timeout)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var itemShortParameter = itemShort != null ?
            new ObjectParameter("itemShort", itemShort) :
            new ObjectParameter("itemShort", typeof(byte[]));


        var timeoutParameter = timeout.HasValue ?
            new ObjectParameter("timeout", timeout) :
            new ObjectParameter("timeout", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempInsertStateItemShort", idParameter, itemShortParameter, timeoutParameter);
    }


    public virtual int TempInsertUninitializedItem(string id, byte[] itemShort, Nullable<int> timeout)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var itemShortParameter = itemShort != null ?
            new ObjectParameter("itemShort", itemShort) :
            new ObjectParameter("itemShort", typeof(byte[]));


        var timeoutParameter = timeout.HasValue ?
            new ObjectParameter("timeout", timeout) :
            new ObjectParameter("timeout", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempInsertUninitializedItem", idParameter, itemShortParameter, timeoutParameter);
    }


    public virtual int TempReleaseStateItemExclusive(string id, Nullable<int> lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var lockCookieParameter = lockCookie.HasValue ?
            new ObjectParameter("lockCookie", lockCookie) :
            new ObjectParameter("lockCookie", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempReleaseStateItemExclusive", idParameter, lockCookieParameter);
    }


    public virtual int TempRemoveStateItem(string id, Nullable<int> lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var lockCookieParameter = lockCookie.HasValue ?
            new ObjectParameter("lockCookie", lockCookie) :
            new ObjectParameter("lockCookie", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempRemoveStateItem", idParameter, lockCookieParameter);
    }


    public virtual int TempResetTimeout(string id)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempResetTimeout", idParameter);
    }


    public virtual int TempUpdateStateItemLong(string id, byte[] itemLong, Nullable<int> timeout, Nullable<int> lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var itemLongParameter = itemLong != null ?
            new ObjectParameter("itemLong", itemLong) :
            new ObjectParameter("itemLong", typeof(byte[]));


        var timeoutParameter = timeout.HasValue ?
            new ObjectParameter("timeout", timeout) :
            new ObjectParameter("timeout", typeof(int));


        var lockCookieParameter = lockCookie.HasValue ?
            new ObjectParameter("lockCookie", lockCookie) :
            new ObjectParameter("lockCookie", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempUpdateStateItemLong", idParameter, itemLongParameter, timeoutParameter, lockCookieParameter);
    }


    public virtual int TempUpdateStateItemLongNullShort(string id, byte[] itemLong, Nullable<int> timeout, Nullable<int> lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var itemLongParameter = itemLong != null ?
            new ObjectParameter("itemLong", itemLong) :
            new ObjectParameter("itemLong", typeof(byte[]));


        var timeoutParameter = timeout.HasValue ?
            new ObjectParameter("timeout", timeout) :
            new ObjectParameter("timeout", typeof(int));


        var lockCookieParameter = lockCookie.HasValue ?
            new ObjectParameter("lockCookie", lockCookie) :
            new ObjectParameter("lockCookie", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempUpdateStateItemLongNullShort", idParameter, itemLongParameter, timeoutParameter, lockCookieParameter);
    }


    public virtual int TempUpdateStateItemShort(string id, byte[] itemShort, Nullable<int> timeout, Nullable<int> lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var itemShortParameter = itemShort != null ?
            new ObjectParameter("itemShort", itemShort) :
            new ObjectParameter("itemShort", typeof(byte[]));


        var timeoutParameter = timeout.HasValue ?
            new ObjectParameter("timeout", timeout) :
            new ObjectParameter("timeout", typeof(int));


        var lockCookieParameter = lockCookie.HasValue ?
            new ObjectParameter("lockCookie", lockCookie) :
            new ObjectParameter("lockCookie", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempUpdateStateItemShort", idParameter, itemShortParameter, timeoutParameter, lockCookieParameter);
    }


    public virtual int TempUpdateStateItemShortNullLong(string id, byte[] itemShort, Nullable<int> timeout, Nullable<int> lockCookie)
    {

        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var itemShortParameter = itemShort != null ?
            new ObjectParameter("itemShort", itemShort) :
            new ObjectParameter("itemShort", typeof(byte[]));


        var timeoutParameter = timeout.HasValue ?
            new ObjectParameter("timeout", timeout) :
            new ObjectParameter("timeout", typeof(int));


        var lockCookieParameter = lockCookie.HasValue ?
            new ObjectParameter("lockCookie", lockCookie) :
            new ObjectParameter("lockCookie", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TempUpdateStateItemShortNullLong", idParameter, itemShortParameter, timeoutParameter, lockCookieParameter);
    }


    public virtual int usp_Check_Key_Expiration(Nullable<System.Guid> guid, ObjectParameter valid)
    {

        var guidParameter = guid.HasValue ?
            new ObjectParameter("Guid", guid) :
            new ObjectParameter("Guid", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Check_Key_Expiration", guidParameter, valid);
    }


    public virtual int usp_KEYS_INSERT(Nullable<System.DateTime> dateTime)
    {

        var dateTimeParameter = dateTime.HasValue ?
            new ObjectParameter("DateTime", dateTime) :
            new ObjectParameter("DateTime", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_KEYS_INSERT", dateTimeParameter);
    }


    public virtual ObjectResult<GetNewUsers1_Result> GetNewUsers1(string applicationName, Nullable<int> max, Nullable<int> date)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var maxParameter = max.HasValue ?
            new ObjectParameter("Max", max) :
            new ObjectParameter("Max", typeof(int));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewUsers1_Result>("GetNewUsers1", applicationNameParameter, maxParameter, dateParameter);
    }


    public virtual ObjectResult<SpgetRoles1_Result> SpgetRoles1(string applicationName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpgetRoles1_Result>("SpgetRoles1", applicationNameParameter);
    }


    public virtual ObjectResult<SPgetconformailwithoutbiztype_batchEmail_Result> SPgetconformailwithoutbiztype_batchEmail(Nullable<int> prospectList, string titleStandard, Nullable<int> batchStartingNumber, Nullable<int> batchEndingNumber)
    {

        var prospectListParameter = prospectList.HasValue ?
            new ObjectParameter("prospectList", prospectList) :
            new ObjectParameter("prospectList", typeof(int));


        var titleStandardParameter = titleStandard != null ?
            new ObjectParameter("titleStandard", titleStandard) :
            new ObjectParameter("titleStandard", typeof(string));


        var batchStartingNumberParameter = batchStartingNumber.HasValue ?
            new ObjectParameter("BatchStartingNumber", batchStartingNumber) :
            new ObjectParameter("BatchStartingNumber", typeof(int));


        var batchEndingNumberParameter = batchEndingNumber.HasValue ?
            new ObjectParameter("BatchEndingNumber", batchEndingNumber) :
            new ObjectParameter("BatchEndingNumber", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetconformailwithoutbiztype_batchEmail_Result>("SPgetconformailwithoutbiztype_batchEmail", prospectListParameter, titleStandardParameter, batchStartingNumberParameter, batchEndingNumberParameter);
    }


    public virtual ObjectResult<SPgetcontactformailsend_batchEmail_Result> SPgetcontactformailsend_batchEmail(Nullable<int> prospectList, string biztype, string titleStandard, Nullable<int> batchStartingNumber, Nullable<int> batchEndingNumber)
    {

        var prospectListParameter = prospectList.HasValue ?
            new ObjectParameter("prospectList", prospectList) :
            new ObjectParameter("prospectList", typeof(int));


        var biztypeParameter = biztype != null ?
            new ObjectParameter("biztype", biztype) :
            new ObjectParameter("biztype", typeof(string));


        var titleStandardParameter = titleStandard != null ?
            new ObjectParameter("titleStandard", titleStandard) :
            new ObjectParameter("titleStandard", typeof(string));


        var batchStartingNumberParameter = batchStartingNumber.HasValue ?
            new ObjectParameter("BatchStartingNumber", batchStartingNumber) :
            new ObjectParameter("BatchStartingNumber", typeof(int));


        var batchEndingNumberParameter = batchEndingNumber.HasValue ?
            new ObjectParameter("BatchEndingNumber", batchEndingNumber) :
            new ObjectParameter("BatchEndingNumber", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetcontactformailsend_batchEmail_Result>("SPgetcontactformailsend_batchEmail", prospectListParameter, biztypeParameter, titleStandardParameter, batchStartingNumberParameter, batchEndingNumberParameter);
    }


    public virtual ObjectResult<SpContactFilter_Result1> SpContactFilter(Nullable<int> listid, Nullable<int> companyid)
    {

        var listidParameter = listid.HasValue ?
            new ObjectParameter("listid", listid) :
            new ObjectParameter("listid", typeof(int));


        var companyidParameter = companyid.HasValue ?
            new ObjectParameter("companyid", companyid) :
            new ObjectParameter("companyid", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpContactFilter_Result1>("SpContactFilter", listidParameter, companyidParameter);
    }


    public virtual ObjectResult<SPGetDataForSendingEmailWithBizType_Result> SPGetDataForSendingEmailWithBizType(Nullable<int> prospectListId, string titleStandard, string bizType, Nullable<int> startIndex, Nullable<int> endIndex)
    {

        var prospectListIdParameter = prospectListId.HasValue ?
            new ObjectParameter("ProspectListId", prospectListId) :
            new ObjectParameter("ProspectListId", typeof(int));


        var titleStandardParameter = titleStandard != null ?
            new ObjectParameter("titleStandard", titleStandard) :
            new ObjectParameter("titleStandard", typeof(string));


        var bizTypeParameter = bizType != null ?
            new ObjectParameter("BizType", bizType) :
            new ObjectParameter("BizType", typeof(string));


        var startIndexParameter = startIndex.HasValue ?
            new ObjectParameter("StartIndex", startIndex) :
            new ObjectParameter("StartIndex", typeof(int));


        var endIndexParameter = endIndex.HasValue ?
            new ObjectParameter("EndIndex", endIndex) :
            new ObjectParameter("EndIndex", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDataForSendingEmailWithBizType_Result>("SPGetDataForSendingEmailWithBizType", prospectListIdParameter, titleStandardParameter, bizTypeParameter, startIndexParameter, endIndexParameter);
    }


    public virtual ObjectResult<SPGetDataForSendingEmailWithoutBizType_Result> SPGetDataForSendingEmailWithoutBizType(Nullable<int> prospectListId, string titleStandard, Nullable<int> startIndex, Nullable<int> endIndex)
    {

        var prospectListIdParameter = prospectListId.HasValue ?
            new ObjectParameter("ProspectListId", prospectListId) :
            new ObjectParameter("ProspectListId", typeof(int));


        var titleStandardParameter = titleStandard != null ?
            new ObjectParameter("titleStandard", titleStandard) :
            new ObjectParameter("titleStandard", typeof(string));


        var startIndexParameter = startIndex.HasValue ?
            new ObjectParameter("StartIndex", startIndex) :
            new ObjectParameter("StartIndex", typeof(int));


        var endIndexParameter = endIndex.HasValue ?
            new ObjectParameter("EndIndex", endIndex) :
            new ObjectParameter("EndIndex", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDataForSendingEmailWithoutBizType_Result>("SPGetDataForSendingEmailWithoutBizType", prospectListIdParameter, titleStandardParameter, startIndexParameter, endIndexParameter);
    }


    public virtual int SPInsertOrUpdateWorker(Nullable<int> id, string name, string email, string password, Nullable<System.TimeSpan> checkIn, Nullable<System.DateTime> createDate, Nullable<System.DateTime> modifiedDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var checkInParameter = checkIn.HasValue ?
            new ObjectParameter("CheckIn", checkIn) :
            new ObjectParameter("CheckIn", typeof(System.TimeSpan));


        var createDateParameter = createDate.HasValue ?
            new ObjectParameter("CreateDate", createDate) :
            new ObjectParameter("CreateDate", typeof(System.DateTime));


        var modifiedDateParameter = modifiedDate.HasValue ?
            new ObjectParameter("ModifiedDate", modifiedDate) :
            new ObjectParameter("ModifiedDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInsertOrUpdateWorker", idParameter, nameParameter, emailParameter, passwordParameter, checkInParameter, createDateParameter, modifiedDateParameter);
    }


    public virtual int SPDeleteWorker(Nullable<int> id)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteWorker", idParameter);
    }


    public virtual int SPInsertOrUpdateWorkerLog(Nullable<int> id, Nullable<int> workerId, string description, string logType, Nullable<System.DateTime> createDate)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var workerIdParameter = workerId.HasValue ?
            new ObjectParameter("WorkerId", workerId) :
            new ObjectParameter("WorkerId", typeof(int));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var logTypeParameter = logType != null ?
            new ObjectParameter("LogType", logType) :
            new ObjectParameter("LogType", typeof(string));


        var createDateParameter = createDate.HasValue ?
            new ObjectParameter("CreateDate", createDate) :
            new ObjectParameter("CreateDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInsertOrUpdateWorkerLog", idParameter, workerIdParameter, descriptionParameter, logTypeParameter, createDateParameter);
    }


    public virtual int SPInsertOrUpdateLog(Nullable<int> id, string status, string type, string description, Nullable<int> recordId)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("Id", id) :
            new ObjectParameter("Id", typeof(int));


        var statusParameter = status != null ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(string));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));


        var recordIdParameter = recordId.HasValue ?
            new ObjectParameter("RecordId", recordId) :
            new ObjectParameter("RecordId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInsertOrUpdateLog", idParameter, statusParameter, typeParameter, descriptionParameter, recordIdParameter);
    }


    public virtual ObjectResult<SearchCompany_Result> SearchCompany(string searchQuery)
    {

        var searchQueryParameter = searchQuery != null ?
            new ObjectParameter("SearchQuery", searchQuery) :
            new ObjectParameter("SearchQuery", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCompany_Result>("SearchCompany", searchQueryParameter);
    }


    public virtual ObjectResult<SearchContact_Result> SearchContact(string searchQuery)
    {

        var searchQueryParameter = searchQuery != null ?
            new ObjectParameter("SearchQuery", searchQuery) :
            new ObjectParameter("SearchQuery", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchContact_Result>("SearchContact", searchQueryParameter);
    }


    public virtual ObjectResult<SpGetEmailtemplatelist_Result> SPgetemailtemplat_GroupinngAdded()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmailtemplatelist_Result>("SPgetemailtemplat_GroupinngAdded");
    }


    public virtual ObjectResult<SPgetemailtemplatebytemplateid_Result> SPgetemailtemplatebytemplateid_GroupingAdded(Nullable<int> templateId)
    {

        var templateIdParameter = templateId.HasValue ?
            new ObjectParameter("TemplateId", templateId) :
            new ObjectParameter("TemplateId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetemailtemplatebytemplateid_Result>("SPgetemailtemplatebytemplateid_GroupingAdded", templateIdParameter);
    }

}

}

